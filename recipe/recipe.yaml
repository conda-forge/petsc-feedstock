schema_version: 1

context:
  version: 3.22.3
  build: 102
  # these variables should all be overridden in variant files
  # but default values are sometimes needed for conda-smithy rerender
  mpi: ${{ mpi | default('mpich') }}
  scalar: ${{ scalar | default('real') }}
  cuda_compiler_version: ${{ cuda_compiler_version | default('None') }}
  # construct some variables to use in the recipe
  # with_cuda can be used as a bool for cuda or not conditions
  with_cuda: ${{ 'true' if cuda_compiler_version != 'None' else '' }}
  # cuda_major is always the major version of cuda as an integer string ('0' if not with_cuda)
  cuda_major: >-
    ${{
      cuda_compiler_version | split('.') | first
      if with_cuda
      else "0"
    }}
  # construct the build prefix (e.g. 'cuda12_complex' or 'real')
  cuda_prefix: ${{ "cuda" + cuda_major + "_" }}
  build_prefix: ${{ cuda_prefix + scalar if with_cuda else scalar }}

package:
  name: petsc
  version: ${{ version }}

source:
  url: https://web.cels.anl.gov/projects/petsc/download/release-snapshots/petsc-${{ version }}.tar.gz
  sha256: 88c0d465a3bd688cb17ebf06a17c06d6e9cc457fa6b9643d217389424e6bd795
  patches:
    - ignore-not-invalid.patch
    - no-cppflags-in-pkgconfig-cflags.patch
    - target-cudadir.patch

build:
  number: ${{ build }}
  string: ${{ build_prefix }}_h${{ hash }}_${{ build }}
  skip: win
  variant:
    # deprioritize cuda and complex with track_features
    down_prioritize_variant: >
      ${{
        (1 if with_cuda else 0)
      + (1 if scalar == "complex" else 0)
      }}

requirements:
  build:
    - ${{ compiler('c') }}
    - ${{ stdlib('c') }}
    - ${{ compiler('cxx') }}
    - ${{ compiler('fortran') }}
    - if: with_cuda
      then: ${{ compiler('cuda') }}
    - if: osx
      then:
        # has symlinks for 'otool', 'install_name_tool', etc.
        # otherwise, we only have 'arm64-apple-darwin20.0.0-install_name_tool'
        - cctools
    - make
    - pkg-config
    - python 3.12.*
    - gnuconfig
    - if: mpi == 'openmpi' and build_platform != target_platform
      then: ${{ mpi }}
  host:
    - libblas
    - liblapack
    - cmake
    - ${{ mpi }}
    - yaml
    - hypre
    - libhwloc
    - metis
    - parmetis
    - libptscotch
    - scalapack
    - superlu
    - superlu_dist
    - libscotch
    - mumps-mpi
    # suitesparse
    - libamd
    - libcholmod
    - libklu
    - libspqr
    - libumfpack

    - hdf5
    - hdf5 * mpi_${{ mpi }}_*
    - fftw
    - fftw * mpi_${{ mpi }}_*

    # cuda
    - if: with_cuda
      then:
        - cuda-version ${{ cuda_compiler_version }}.*
        - if: cuda_major == "11"
          then:
            - cudatoolkit
          else:
            - cuda-cudart-dev
            - cuda-nvtx-dev
            - libcublas-dev
            - libcufft-dev
            - libcurand-dev
            - libcusolver-dev
            - libcusparse-dev
  run:
    - if: with_cuda
      then:
      - if: cuda_major == "11"
        then:
          - cuda-version >=11.2,<12
          - cudatoolkit >=11.2,<12
        else:
          - ${{ pin_compatible('cuda-version', lower_bound='x', upper_bound='x') }}
          - ${{ pin_compatible('cuda-nvtx', lower_bound='x', upper_bound='x') }}
          - ${{ pin_compatible('cuda-cudart', lower_bound='x', upper_bound='x') }}
          - ${{ pin_compatible('libcublas', lower_bound='x', upper_bound='x') }}
          - ${{ pin_compatible('libcufft', lower_bound='x', upper_bound='x') }}
          - ${{ pin_compatible('libcurand', lower_bound='x', upper_bound='x') }}
          - ${{ pin_compatible('libcusolver', lower_bound='x', upper_bound='x') }}
          - ${{ pin_compatible('libcusparse', lower_bound='x', upper_bound='x') }}
  run_exports:
    - ${{ pin_subpackage('petsc', upper_bound='x.x') }}
    - petsc * ${{ build_prefix }}_*
  ignore_run_exports:
    from_package:
      - if: with_cuda
        then:
          - ${{ compiler("cuda") | split | first }}
      - cudatoolkit
      - cuda-cudart-dev
      - cuda-nvtx-dev
      - libcublas-dev
      - libcufft-dev
      - libcurand-dev
      - libcusolver-dev
      - libcusparse-dev

tests:
  - files:
      recipe:
        - tests/ex1.c
        - tests/ex1f.F90
        - tests/testdlopen.c
        - tests/makefile
    requirements:
      run:
        - pkg-config
        - make
        - ${{ compiler('c') }}
        - ${{ compiler('cxx') }}
        - ${{ compiler('fortran') }}
    script:
      file: run_test.sh
      env:
        target_platform: ${{ target_platform }}
        cuda_compiler_version: ${{ cuda_compiler_version }}

about:
  summary: |
    PETSc: Portable, Extensible Toolkit for Scientific Computation
  license: BSD-2-Clause
  license_file: LICENSE
  homepage: https://www.mcs.anl.gov/petsc/
  repository: https://gitlab.com/petsc/petsc
  documentation: https://petsc.org/release/docs/manual/

extra:
  recipe-maintainers:
    - jan-janssen
    - dalcinl
    - minrk
    - davidbrochart
    - SylvainCorlay
    - martinRenou
    - matthiasdiener
    - stefanozampini
